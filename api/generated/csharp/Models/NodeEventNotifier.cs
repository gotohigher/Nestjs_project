// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NodeEventNotifier.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NodeEventNotifier
    {
        [EnumMember(Value = "SubscribeToEvents")]
        SubscribeToEvents,
        [EnumMember(Value = "HistoryRead")]
        HistoryRead,
        [EnumMember(Value = "HistoryWrite")]
        HistoryWrite
    }
    internal static class NodeEventNotifierEnumExtension
    {
        internal static string ToSerializedValue(this NodeEventNotifier? value)
        {
            return value == null ? null : ((NodeEventNotifier)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NodeEventNotifier value)
        {
            switch( value )
            {
                case NodeEventNotifier.SubscribeToEvents:
                    return "SubscribeToEvents";
                case NodeEventNotifier.HistoryRead:
                    return "HistoryRead";
                case NodeEventNotifier.HistoryWrite:
                    return "HistoryWrite";
            }
            return null;
        }

        internal static NodeEventNotifier? ParseNodeEventNotifier(this string value)
        {
            switch( value )
            {
                case "SubscribeToEvents":
                    return NodeEventNotifier.SubscribeToEvents;
                case "HistoryRead":
                    return NodeEventNotifier.HistoryRead;
                case "HistoryWrite":
                    return NodeEventNotifier.HistoryWrite;
            }
            return null;
        }
    }
}
