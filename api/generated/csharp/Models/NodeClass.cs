// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NodeClass.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NodeClass
    {
        [EnumMember(Value = "Object")]
        Object,
        [EnumMember(Value = "Variable")]
        Variable,
        [EnumMember(Value = "Method")]
        Method,
        [EnumMember(Value = "ObjectType")]
        ObjectType,
        [EnumMember(Value = "VariableType")]
        VariableType,
        [EnumMember(Value = "ReferenceType")]
        ReferenceType,
        [EnumMember(Value = "DataType")]
        DataType,
        [EnumMember(Value = "View")]
        View
    }
    internal static class NodeClassEnumExtension
    {
        internal static string ToSerializedValue(this NodeClass? value)
        {
            return value == null ? null : ((NodeClass)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NodeClass value)
        {
            switch( value )
            {
                case NodeClass.Object:
                    return "Object";
                case NodeClass.Variable:
                    return "Variable";
                case NodeClass.Method:
                    return "Method";
                case NodeClass.ObjectType:
                    return "ObjectType";
                case NodeClass.VariableType:
                    return "VariableType";
                case NodeClass.ReferenceType:
                    return "ReferenceType";
                case NodeClass.DataType:
                    return "DataType";
                case NodeClass.View:
                    return "View";
            }
            return null;
        }

        internal static NodeClass? ParseNodeClass(this string value)
        {
            switch( value )
            {
                case "Object":
                    return NodeClass.Object;
                case "Variable":
                    return NodeClass.Variable;
                case "Method":
                    return NodeClass.Method;
                case "ObjectType":
                    return NodeClass.ObjectType;
                case "VariableType":
                    return NodeClass.VariableType;
                case "ReferenceType":
                    return NodeClass.ReferenceType;
                case "DataType":
                    return NodeClass.DataType;
                case "View":
                    return NodeClass.View;
            }
            return null;
        }
    }
}
