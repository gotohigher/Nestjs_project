{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "solutionName": {
            "type": "string",
            "defaultValue": "iiotservices",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "allowedValues": [
                "core.windows.net",
                "core.chinacloudapi.cn",
                "core.cloudapi.de"
            ],
            "metadata": {
                "description": "Suffix added to Azure Storage hostname"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB default consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S2",
            "allowedValues": [
                "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The iot hub endpoint partition count"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of agents for the cluster.  This value can be from 1 to 100 (note, for Kubernetes clusters you will also get 1 or 2 public agents in addition to these seleted masters)"
            },
            "minValue": 1,
            "maxValue": 100
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "allowedValues": [
                    "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5",
                    "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
                    "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4",
                    "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
                    "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
                    "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
                    "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
                    "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4",
                    "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
                    "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Linux Virtual Machine."
            }
        },
        "masterCount": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1
            ],
            "metadata": {
                "description": "The number of Kubernetes masters for the cluster."
            }
        },
        "sshRSAPublicKey": {
            "type": "string",
            "metadata": {
                "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
            }
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)"
            },
            "type": "securestring",
            "defaultValue": "n/a"
        },
        "servicePrincipalSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring",
            "defaultValue": "n/a"
        },
        "azureWebsiteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('keyvault-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The resource name of the KeyVault"
            }
        },
        "keyVaultDisplayName": {
            "type": "string",
            "defaultValue": "[parameters('solutionName')]",
            "metadata": {
                "description": "The display name for the KeyVault"
            }
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The KeyVault SKU to use."
            }
        },
        "remoteEndpointSSLThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "This is the thumbprint of the HTTPS SSL Certificate"
            },
            "defaultValue": "secretkey"
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        "iotHubApiVersion": "2018-04-01",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubContainerName": "[parameters('iotHubName')]",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "deviceNotificationRouteName": "DeviceNotifications",
        "onboardingConsumerGroupName": "onboarding",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]",
        "adminUsername": "[parameters('adminUsername')]",
        "agentCount": "[parameters('agentCount')]",
        "publicIPName": "[concat(take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5), '-public-ip')]",
        "clusterName": "[concat(resourceGroup().name, '-cluster')]",
        "agentsEndpointDNSNamePrefix": "[concat(parameters('solutionName'),'-agents')]",
        "domainNameLabel": "[concat('agent-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
        "agentVMSize": "[parameters('agentVMSize')]",
        "masterCount": "[parameters('masterCount')]",
        "mastersEndpointDNSNamePrefix": "[concat(parameters('solutionName'),'-mgmt')]",
        "orchestratorType": "Kubernetes",
        "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
        "keyVaultVersion": "2015-06-01",
        "proxyBranch": "master",
        "hostingPlanName": "[parameters('azureWebsiteName')]",
        "appServiceVersion": "2018-02-01",
        "appServicePlanVersion": "2018-02-01",
        "appServiceSku": "S1",
        "appServiceWorkerSize": "0"
    },
    "resources": [
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
                "location": "[variables('location')]",
                "ipFilterRules": [],
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": "[parameters('iotHubPartitionCount')]"
                    },
                    "operationsMonitoringEvents": {
                        "retentionTimeInDays": 1,
                        "partitionCount": 4
                    }
                },
                "routing": {
                    "endpoints": {
                        "serviceBusQueues": [],
                        "serviceBusTopics": [],
                        "eventHubs": [],
                        "storageContainers": []
                    },
                    "routes": [],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "storageEndpoints": {
                    "$default": {
                        "sasTtlAsIso8601": "PT1H",
                        "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
                        "containerName": "[variables('iotHubContainerName')]"
                    }
                },
                "messagingEndpoints": {
                    "fileNotifications": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "enableFileUploadNotifications": true,
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "None"
            },
            "dependsOn": [
                "[variables('storageResourceId')]"
            ]
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('onboardingConsumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Storage account",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "dependsOn": []
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            },
            "dependsOn": []
        },
        {
            "comments": "Azure Event Hub Namespace",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "comments": "Azure Event Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },
        {
            "comments": "Event Hub Authorization for Iot Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
            "apiVersion":  "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "[variables('keyVaultVersion')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "[parameters('keyVaultDisplayName')]"
            },
            "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": false,
                "enabledForVolumeEncryption": false,
                "sku": {
                    "name": "[parameters('keyVaultSkuName')]",
                    "family": "A"
                },
                "tenantId": "[parameters('aadTenantId')]",
                "accessPolicies": []
            }
        },
        {
            "comments": "AppService plan to host the Application Gateway Web App",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "[variables('appServiceSku')]",
                "capacity": "[variables('appServiceWorkerSize')]"
            },
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "[variables('appServicePlanVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('hostingPlanName')]"
            }
        },
        {
            "comments": "Application Gateway Web App",
            "type": "Microsoft.Web/sites",
            "name": "[parameters('azureWebsiteName')]",
            "apiVersion": "[variables('appServiceVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": false,
                "serverFarmId": "[variables('hostingPlanName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "REMOTE_ENDPOINT",
                            "value": "[concat('https://', reference(variables('publicIPName')).dnsSettings.fqdn)]"
                        },
                        {
                            "name": "REMOTE_ENDPOINT_SSL_THUMBPRINT",
                            "value": "[parameters('remoteEndpointSSLThumbprint')]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "apiVersion": "[variables('appServiceVersion')]",
                    "name": "web",
                    "type": "sourcecontrols",
                    "properties": {
                        "RepoUrl": "https://github.com/Azure/reverse-proxy-dotnet.git",
                        "branch": "[variables('proxyBranch')]",
                        "IsManualIntegration": true
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('azureWebsiteName'))]"
                    ]
                },
                {
                    "apiVersion": "[variables('appServiceVersion')]",
                    "name": "web",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('azureWebsiteName'))]"
                    ],
                    "properties": {
                        "numberOfWorkers": 1,
                        "requestTracingEnabled": true,
                        "httpLoggingEnabled": true,
                        "detailedErrorLoggingEnabled": true,
                        "alwaysOn": true,
                        "minTlsVersion": "1.2"
                    }
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPName')]",
            "apiVersion": "2016-11-01",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(variables('domainNameLabel'))]"
                },
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "apiVersion": "2016-09-30",
            "type": "Microsoft.ContainerService/containerServices",
            "location": "[resourceGroup().location]",
            "name": "[variables('clusterName')]",
            "properties": {
                "orchestratorProfile": {
                    "orchestratorType": "[variables('orchestratorType')]"
                },
                "masterProfile": {
                    "count": "[variables('masterCount')]",
                    "dnsPrefix": "[variables('mastersEndpointDNSNamePrefix')]"
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpools",
                        "count": "[variables('agentCount')]",
                        "vmSize": "[variables('agentVMSize')]",
                        "dnsPrefix": "[variables('agentsEndpointDNSNamePrefix')]"
                    }
                ],
                "linuxProfile": {
                    "adminUsername": "[variables('adminUsername')]",
                    "ssh": {
                        "publicKeys": [
                            {
                                "keyData": "[variables('sshRSAPublicKey')]"
                            }
                        ]
                    }
                },
                "servicePrincipalProfile": {
                    "ClientId": "[parameters('servicePrincipalClientId')]",
                    "Secret": "[parameters('servicePrincipalSecret')]"
                }
            }
        }
    ],
    "outputs": {
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "azureWebsite": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
        },
        "masterFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/containerServices/', variables('clusterName'))).masterProfile.fqdn]"
        },
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "clusterName": {
            "type": "string",
            "value": "[variables('clusterName')]"
        },
        "sshMaster0": {
            "type": "string",
            "value": "[concat('ssh ', variables('adminUsername'), '@', reference(concat('Microsoft.ContainerService/containerServices/', variables('clusterName'))).masterProfile.fqdn, ' -A -p 22')]"
        },
        "loadBalancerIp": {
            "type": "string",
            "value": "[reference(variables('publicIPName')).ipAddress]"
        },
        "agentFQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPName')).dnsSettings.fqdn]"
        }
    }
}