# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BrowsePathRequestApiModel(Model):
    """Browse nodes by path.

    :param node_id: Node to browse.
     (default: RootFolder).
    :type node_id: str
    :param path_elements: The path elements of the path to browse from node.
     (mandatory)
    :type path_elements: list[str]
    :param read_variable_values: Whether to read variable values on target
     nodes.
     (default is false). Default value: False .
    :type read_variable_values: bool
    :param elevation: Optional User elevation
    :type elevation: ~azure-iiot-opc-twin.models.CredentialApiModel
    :param diagnostics: Optional diagnostics configuration
    :type diagnostics: ~azure-iiot-opc-twin.models.DiagnosticsApiModel
    """

    _validation = {
        'path_elements': {'required': True},
    }

    _attribute_map = {
        'node_id': {'key': 'nodeId', 'type': 'str'},
        'path_elements': {'key': 'pathElements', 'type': '[str]'},
        'read_variable_values': {'key': 'readVariableValues', 'type': 'bool'},
        'elevation': {'key': 'elevation', 'type': 'CredentialApiModel'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsApiModel'},
    }

    def __init__(self, path_elements, node_id=None, read_variable_values=False, elevation=None, diagnostics=None):
        super(BrowsePathRequestApiModel, self).__init__()
        self.node_id = node_id
        self.path_elements = path_elements
        self.read_variable_values = read_variable_values
        self.elevation = elevation
        self.diagnostics = diagnostics
