/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * A monitored and published item
 *
 */
class PublishedItemApiModel {
  /**
   * Create a PublishedItemApiModel.
   * @property {string} nodeId Node to monitor
   * @property {string} [nodeAttribute] Attribute to monitor. Possible values
   * include: 'NodeClass', 'BrowseName', 'DisplayName', 'Description',
   * 'WriteMask', 'UserWriteMask', 'IsAbstract', 'Symmetric', 'InverseName',
   * 'ContainsNoLoops', 'EventNotifier', 'Value', 'DataType', 'ValueRank',
   * 'ArrayDimensions', 'AccessLevel', 'UserAccessLevel',
   * 'MinimumSamplingInterval', 'Historizing', 'Executable', 'UserExecutable',
   * 'DataTypeDefinition', 'RolePermissions', 'UserRolePermissions',
   * 'AccessRestrictions'
   * @property {number} [publishingInterval] Publishing interval to use
   * @property {number} [samplingInterval] Sampling interval to use
   */
  constructor() {
  }

  /**
   * Defines the metadata of PublishedItemApiModel
   *
   * @returns {object} metadata of PublishedItemApiModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PublishedItemApiModel',
      type: {
        name: 'Composite',
        className: 'PublishedItemApiModel',
        modelProperties: {
          nodeId: {
            required: true,
            serializedName: 'nodeId',
            type: {
              name: 'String'
            }
          },
          nodeAttribute: {
            required: false,
            serializedName: 'nodeAttribute',
            type: {
              name: 'Enum',
              allowedValues: [ 'NodeClass', 'BrowseName', 'DisplayName', 'Description', 'WriteMask', 'UserWriteMask', 'IsAbstract', 'Symmetric', 'InverseName', 'ContainsNoLoops', 'EventNotifier', 'Value', 'DataType', 'ValueRank', 'ArrayDimensions', 'AccessLevel', 'UserAccessLevel', 'MinimumSamplingInterval', 'Historizing', 'Executable', 'UserExecutable', 'DataTypeDefinition', 'RolePermissions', 'UserRolePermissions', 'AccessRestrictions' ]
            }
          },
          publishingInterval: {
            required: false,
            serializedName: 'publishingInterval',
            type: {
              name: 'Number'
            }
          },
          samplingInterval: {
            required: false,
            serializedName: 'samplingInterval',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = PublishedItemApiModel;
